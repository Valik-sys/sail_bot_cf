import asyncio
import time
import logging
from datetime import datetime
from openai import AsyncOpenAI
from config.settings import settings
from database.models import get_user

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, 
                   format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = AsyncOpenAI(api_key=settings.OPENAI_API_KEY)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {user_id: {'messages': [], 'last_activity': timestamp, 'analyzed': False}}
active_sessions = {}

# –¢–∞–π–º–∞—É—Ç —Å–µ—Å—Å–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (10 –º–∏–Ω—É—Ç)
SESSION_TIMEOUT = 15

async def add_message_to_session(user_id, user_message, bot_response):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    current_time = time.time()
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –æ–Ω–∞ –∏—Å—Ç–µ–∫–ª–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
    if user_id not in active_sessions or (current_time - active_sessions[user_id]['last_activity']) > SESSION_TIMEOUT:
        active_sessions[user_id] = {
            'messages': [],
            'last_activity': current_time,
            'analyzed': False
        }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏—é
    active_sessions[user_id]['messages'].append({
        'user': user_message,
        'bot': bot_response,
        'time': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    })
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    active_sessions[user_id]['last_activity'] = current_time
    logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

async def analyze_session(user_id):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Å—Å–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in active_sessions or active_sessions[user_id]['analyzed']:
        return None
    
    session = active_sessions[user_id]
    messages = session['messages']
    
    if not messages or len(messages) < 1:  # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 2 —Å–æ–æ–±—â–µ–Ω–∏–π, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ
        session['analyzed'] = True
        return None
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    dialog_text = ""
    for i, msg in enumerate(messages):
        dialog_text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{msg['time']}]: {msg['user']}\n"
        dialog_text += f"–ë–æ—Ç: {msg['bot']}\n\n"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT
    prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ª–æ–≥ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –±–æ—Ç–æ–º. 
    
    –û–ø—Ä–µ–¥–µ–ª–∏:
    1. –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫—É–ø–∫–æ–π –∫—É—Ä—Å–∞ –∏–ª–∏ –∫–∞–∫–∏–º —Ç–æ –¥—Ä—É–≥–∏–º –ø—Ä–æ–¥—É–∫—Ç–æ–º? –ï—Å–ª–∏ –¥–∞, —Ç–æ –∫–∞–∫–∏–º?
    2. –ö–∞–∫–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å?
    3. –ù–∞ –∫–∞–∫–æ–π —Å—Ç–∞–¥–∏–∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å?
    4. –ß—Ç–æ –º–æ–≥–ª–æ –±—ã –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ?
    
    –î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–¥–æ 5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—è–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ –ø–æ–∫—É–ø–∫–µ –∫—É—Ä—Å–∞, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ "–ù–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ –ø–æ–∫—É–ø–∫–µ –∫—É—Ä—Å–∞".
    
    –î–ò–ê–õ–û–ì:
    {dialog_text}
    """
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT
        response = await client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": '''–¢—ã - –∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–∏–∞–ª–æ–≥–æ–≤,
                 –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø–æ–∫—É–ø–∫–µ –∫—É—Ä—Å–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
                 –¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å —Å –¥–∏–∞–ª–æ–≥–æ–º –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –±–æ—Ç–æ–º.
                 –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –¥–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞, –≤—ã—è–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''},
                {"role": "user", "content": prompt}
            ],
            max_tokens=500
        )
        
        analysis_text = response.choices[0].message.content.strip()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º
        is_lead = "–Ω–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ –ø–æ–∫—É–ø–∫–µ –∫—É—Ä—Å–∞" not in analysis_text.lower()
        
        # –û—Ç–º–µ—á–∞–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é
        session['analyzed'] = True
        
        if is_lead:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç")
            return {
                "user_id": user_id,
                "analysis_text": analysis_text,
                "is_lead": is_lead
            }
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –ø—Ä–æ—è–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ –ø–æ–∫—É–ø–∫–µ")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        session['analyzed'] = True  # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é, —á—Ç–æ–±—ã –Ω–µ –ø—ã—Ç–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞
        return None

async def format_lead_message(analysis_result):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–º –∫–ª–∏–µ–Ω—Ç–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    user_id = analysis_result["user_id"]
    user_data = await get_user(user_id)
    
    if not user_data:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return None
    
    username = user_data[2] or "–ù–µ—Ç username"
    first_name = user_data[3] or ""
    last_name = user_data[4] or ""
    country = user_data[5] or "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    interests = user_data[6] or "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
    subject = user_data[7] or "–ù–µ —É–∫–∞–∑–∞–Ω"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"""üîç –ù–û–í–´–ô –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ô –ö–õ–ò–ï–ù–¢

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} ({first_name} {last_name})
üì± ID: {user_id}
üåç –°—Ç—Ä–∞–Ω–∞: {country}
üìö –ü—Ä–µ–¥–º–µ—Ç: {subject}
üîé –ò–Ω—Ç–µ—Ä–µ—Å—ã: {interests}

üí¨ –ê–ù–ê–õ–ò–ó –î–ò–ê–õ–û–ì–ê:
{analysis_result["analysis_text"]}

‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}
"""
    return message

async def send_message_to_manager(bot, text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        await bot.send_message(
            chat_id=settings.MANAGER_CHAT_ID,
            text=text
        )
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {e}", exc_info=True)
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –ø—Ä–æ–±–ª–µ–º–µ
        try:
            await bot.send_message(
                chat_id=settings.ADMIN_ID,
                text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {e}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏ –≥—Ä—É–ø–ø—ã."
            )
        except Exception as ex:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {ex}")
        return False

async def cleanup_sessions():
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –ø–∞–º—è—Ç–∏"""
    current_time = time.time()
    users_to_remove = []
    
    for user_id, session in active_sessions.items():
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        if session['analyzed']:
            users_to_remove.append(user_id)
        # –£–¥–∞–ª—è–µ–º –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ (–±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤)
        elif (current_time - session['last_activity']) > 86400:  # 24 —á–∞—Å–∞
            users_to_remove.append(user_id)
    
    # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    for user_id in users_to_remove:
        if user_id in active_sessions:
            del active_sessions[user_id]
    
    if users_to_remove:
        logger.info(f"–û—á–∏—â–µ–Ω–æ {len(users_to_remove)} —Å–µ—Å—Å–∏–π –∏–∑ –ø–∞–º—è—Ç–∏")

async def check_inactive_sessions(bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Ö"""
    current_time = time.time()
    
    for user_id, session in list(active_sessions.items()):
        try:
            # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –±–æ–ª–µ–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∞–π–º–∞—É—Ç–∞ –∏ –Ω–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
            if (current_time - session['last_activity']) > SESSION_TIMEOUT and not session['analyzed']:
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –Ω–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑")
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
                analysis_result = await analyze_session(user_id)
                
                if analysis_result and analysis_result["is_lead"]:
                    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                    lead_message = await format_lead_message(analysis_result)
                    
                    if lead_message:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
                        await send_message_to_manager(bot, lead_message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
            # –û—Ç–º–µ—á–∞–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é, —á—Ç–æ–±—ã –Ω–µ –ø—ã—Ç–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞
            session['analyzed'] = True

async def start_session_analyzer(bot):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
    logger.info("–ó–∞–ø—É—â–µ–Ω –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–π")
    while True:
        try:
            await check_inactive_sessions(bot)
            await cleanup_sessions()  # –û—á–∏—â–∞–µ–º –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–µ—Å—Å–∏–∏
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Å—Å–∏–π: {e}", exc_info=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        await asyncio.sleep(60)

