from aiogram import Router, F
from aiogram.types import ReplyKeyboardRemove
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config.settings import settings
from keyboards.admin_kb import get_admin_main_keyboard, get_admin_back_keyboard, get_broadcast_confirmation_keyboard 
from keyboards.admin_kb import get_segment_keyboard, get_segment_selection_keyboard
from database.admin_models import get_users_count, get_messages_count, get_ratings_stats, get_all_users, get_all_user_ids 
from database.admin_models import get_available_segments, get_users_by_segment, delete_user
from aiogram.types import Chat

def is_admin_filter(message):
    return is_admin(message.from_user.id)

admin_router = Router()

class AdminStates(StatesGroup):
    main_menu = State()  # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    waiting_for_broadcast_text = State()  # –û–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    confirm_broadcast = State()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    segment_selection = State()  # –í—ã–±–æ—Ä —Å–µ–≥–º–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    waiting_for_country = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã
    waiting_for_interests = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    waiting_for_subject = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
    waiting_for_user_id = State()  # –û–∂–∏–¥–∞–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    
def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == settings.ADMIN_ID

@admin_router.message(Command(commands=['admin']))
async def cmd_admin(message:Message,state:FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await state.set_state(AdminStates.main_menu)
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=get_admin_main_keyboard())
    
    
@admin_router.message(AdminStates.main_menu,F.text=="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def admin_statistics(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return 
    
    
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    users_count = await get_users_count()
    messages_count = await get_messages_count()
    ratings_data = await get_ratings_stats()

    
    stats_text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
    stats_text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{users_count}</b>\n"
    stats_text += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: <b>{messages_count}</b>\n"
    stats_text += f"‚≠ê –û—Ü–µ–Ω–æ–∫: <b>{ratings_data['total_count']}</b>\n"
    
    if ratings_data['total_count'] > 0:
        stats_text += f"üìà –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: <b>{ratings_data['avg_rating']}</b>\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫
        stats_text += "<b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫:</b>\n"
        for rating in range(1, 6):
            count = ratings_data['distribution'].get(rating, 0)
            stars = "‚≠ê" * rating
            stats_text += f"{stars}: {count}\n"
    
    await message.answer(stats_text, parse_mode="HTML")
    

@admin_router.message(AdminStates.main_menu, F.text == "üóì –°–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞")
async def admin_segment_broadcast(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    
    await state.set_state(AdminStates.segment_selection)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
    segments = await get_available_segments()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(available_segments=segments)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏:",
        reply_markup=get_segment_keyboard()
    )

@admin_router.message(AdminStates.segment_selection, F.text == "üåç –ü–æ —Å—Ç—Ä–∞–Ω–µ")
async def select_country_segment(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    
    data = await state.get_data()
    segments = data.get("available_segments", {})
    countries = segments.get("countries", [])
    
    if not countries:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä.")
        return
    
    await state.set_state(AdminStates.waiting_for_country)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=get_segment_selection_keyboard(countries)
    )

@admin_router.message(AdminStates.segment_selection, F.text == "üéØ –ü–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º")
async def select_interests_segment(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    
    data = await state.get_data()
    segments = data.get("available_segments", {})
    interests = segments.get("interests", [])
    
    if not interests:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä.")
        return
    
    await state.set_state(AdminStates.waiting_for_interests)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=get_segment_selection_keyboard(interests)
    )

@admin_router.message(AdminStates.segment_selection, F.text == "üìö –ü–æ –ø—Ä–µ–¥–º–µ—Ç—É")
async def select_subject_segment(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    
    data = await state.get_data()
    segments = data.get("available_segments", {})
    subjects = segments.get("subjects", [])
    
    if not subjects:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä.")
        return
    
    await state.set_state(AdminStates.waiting_for_subject)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=get_segment_selection_keyboard(subjects)
    )

@admin_router.message(AdminStates.segment_selection, F.text == "üë• –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
async def select_all_users(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ —Ä–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    await state.update_data(segment_type=None, segment_value=None)
    
    await state.set_state(AdminStates.waiting_for_broadcast_text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=get_admin_back_keyboard()
    )

@admin_router.message(AdminStates.segment_selection, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def segment_selection_back(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    
    await state.set_state(AdminStates.main_menu)
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.",
        reply_markup=get_admin_main_keyboard()
    )

@admin_router.message(AdminStates.waiting_for_country)
async def process_country_selection(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(AdminStates.segment_selection)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏:",
            reply_markup=get_segment_keyboard()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω—É
    await state.update_data(segment_type="country", segment_value=message.text)
    
    await state.set_state(AdminStates.waiting_for_broadcast_text)
    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ–≥–º–µ–Ω—Ç: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ —Å—Ç—Ä–∞–Ω—ã {message.text}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=get_admin_back_keyboard()
    )

@admin_router.message(AdminStates.waiting_for_interests)
async def process_interests_selection(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(AdminStates.segment_selection)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏:",
            reply_markup=get_segment_keyboard()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å
    await state.update_data(segment_type="interests", segment_value=message.text)
    
    await state.set_state(AdminStates.waiting_for_broadcast_text)
    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ–≥–º–µ–Ω—Ç: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ—Å—è —Ç–µ–º–æ–π {message.text}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=get_admin_back_keyboard()
    )

@admin_router.message(AdminStates.waiting_for_subject)
async def process_subject_selection(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(AdminStates.segment_selection)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏:",
            reply_markup=get_segment_keyboard()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
    await state.update_data(segment_type="subject", segment_value=message.text)
    
    await state.set_state(AdminStates.waiting_for_broadcast_text)
    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ–≥–º–µ–Ω—Ç: –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ {message.text}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=get_admin_back_keyboard()
    )

@admin_router.message(AdminStates.waiting_for_broadcast_text, F.text =='‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
async def admin_broadcast_back(message:Message, state:FSMContext):
    if not is_admin(message.from_user.id):
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏ - –∏–∑ –æ–±—ã—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π
    data = await state.get_data()
    segment_type = data.get('segment_type')
        
    if segment_type:
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–µ–≥–º–µ–Ω—Ç–∞
        await state.set_state(AdminStates.segment_selection)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏:",
            reply_markup=get_segment_keyboard()
        )
    else:
        # –ï—Å–ª–∏ –æ–±—ã—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.set_state(AdminStates.main_menu)
        await message.answer(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.",
            reply_markup=get_admin_main_keyboard()
        )
    
@admin_router.message(AdminStates.waiting_for_broadcast_text, F.text)
async def admin_broadcast_text(message:Message, state:FSMContext):
    if not is_admin(message.from_user.id):
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(broadcast_text=message.text)
    await state.set_state(AdminStates.confirm_broadcast)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–≥–º–µ–Ω—Ç–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    data = await state.get_data()
    segment_type = data.get('segment_type')
    segment_value = data.get('segment_value')
    
    segment_info = ""
    if segment_type:
        if segment_type == "country":
            segment_info = f"–°–µ–≥–º–µ–Ω—Ç: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ —Å—Ç—Ä–∞–Ω—ã {segment_value}\n\n"
        elif segment_type == "interests":
            segment_info = f"–°–µ–≥–º–µ–Ω—Ç: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ—Å—è —Ç–µ–º–æ–π {segment_value}\n\n"
        elif segment_type == "subject":
            segment_info = f"–°–µ–≥–º–µ–Ω—Ç: –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ {segment_value}\n\n"
    
    await message.answer(
        f"<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n{segment_info}{message.text}\n\n"
        f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?",
        parse_mode="HTML",
        reply_markup=get_broadcast_confirmation_keyboard()
    )
    
@admin_router.callback_query(AdminStates.confirm_broadcast, F.data == "broadcast:confirm")
async def admin_broadcast_confirm(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    broadcast_text = data.get('broadcast_text', '')
    segment_type = data.get('segment_type')
    segment_value = data.get('segment_value')
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
    if segment_type:
        if segment_type == "country":
            user_ids = await get_users_by_segment(country=segment_value)
            segment_description = f"–∏–∑ —Å—Ç—Ä–∞–Ω—ã {segment_value}"
        elif segment_type == "interests":
            user_ids = await get_users_by_segment(interests=segment_value)
            segment_description = f"–∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö—Å—è —Ç–µ–º–æ–π {segment_value}"
        elif segment_type == "subject":
            user_ids = await get_users_by_segment(subject=segment_value)
            segment_description = f"–ø—Ä–µ–ø–æ–¥–∞—é—â–∏—Ö –ø—Ä–µ–¥–º–µ—Ç {segment_value}"
        else:
            user_ids = await get_all_user_ids()
            segment_description = "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
    else:
        user_ids = await get_all_user_ids()
        segment_description = "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    await callback.message.edit_text(
        f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º {segment_description}...",
        reply_markup=None
    )
    
    # –°—á–µ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
    success_count = 0
    error_count = 0
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for user_id in user_ids:
        try:
            await callback.bot.send_message(
                chat_id=user_id,
                text=broadcast_text,
                parse_mode="HTML"
            )
            success_count += 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            error_count += 1
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
    await callback.message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚úì –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"‚úó –û—à–∏–±–æ–∫: {error_count}",
        parse_mode="HTML"
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.set_state(AdminStates.main_menu)
    await callback.message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.",
        reply_markup=get_admin_main_keyboard()
    )
    
@admin_router.callback_query(AdminStates.confirm_broadcast, F.data == "broadcast:cancel")
async def admin_broadcast_cancel(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    await callback.message.edit_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=None)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏ - –∏–∑ –æ–±—ã—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π
    data = await state.get_data()
    segment_type = data.get('segment_type')
    
    if segment_type:
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–µ–≥–º–µ–Ω—Ç–∞
        await state.set_state(AdminStates.segment_selection)
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏:",
            reply_markup=get_segment_keyboard()
        )
    else:
        # –ï—Å–ª–∏ –æ–±—ã—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.set_state(AdminStates.main_menu)
        await callback.message.answer(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.",
            reply_markup=get_admin_main_keyboard()
        )

@admin_router.message(AdminStates.main_menu, F.text == "‚ùå –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
async def admin_exit(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    
    await state.clear()
    await message.answer(
        "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.",
        reply_markup=ReplyKeyboardRemove(),
        
    )
    
@admin_router.message(AdminStates.main_menu, F.text == "üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def admin_delete_user_request(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    
    await state.set_state(AdminStates.waiting_for_user_id)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:",
        reply_markup=get_admin_back_keyboard()
    )

@admin_router.message(AdminStates.waiting_for_user_id, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def admin_delete_user_back(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    
    await state.set_state(AdminStates.main_menu)
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.",
        reply_markup=get_admin_main_keyboard()
    )

@admin_router.message(AdminStates.waiting_for_user_id)
async def admin_delete_user(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    
    try:
        user_id = int(message.text)
        deleted = await delete_user(user_id)
        
        if deleted:
            await message.answer(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=get_admin_main_keyboard()
            )
        else:
            await message.answer(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=get_admin_main_keyboard()
            )
        
        await state.set_state(AdminStates.main_menu)
    except ValueError:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_admin_back_keyboard()
        )

@admin_router.message(Command(commands=['test_manager']))
async def cmd_test_manager(message: Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä—É"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        await message.bot.send_message(
            chat_id=settings.MANAGER_CHAT_ID,
            text="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä—É."
        )
        await message.answer("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")